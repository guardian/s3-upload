AWSTemplateFormatVersion: '2010-09-09'
Description: S3 Uploader
Parameters:
  SSLCertificateId:
    Type: String
    Description: ARN of the SSL certificate to be used for the load balancer
  Stage:
    Type: String
    Description: Environment name
    AllowedValues:
    - CODE
    - PROD
    Default: PROD
  Stack:
    Description: Stack name
    Type: String
    Default: media-service
  App:
    Description: App name
    Type: String
    Default: s3-uploader
  KeyName:
    Description: 'The EC2 Key Pair to allow SSH access to the instance'
    Type: AWS::EC2::KeyPair::KeyName
    Default: 'digital-cms-team'
  DomainRoot:
    Description: Root domain (suffix) for all deployed services
    Type: String
  PlayApplicationSecret:
    Description: application.secret for Play configuration
    Type: String
  AMI:
    Description: AMI id from Amigo with tag editorial-tools-xenial-java8
    Type: String
  ConfigBucket:
    Description: Bucket name for s3 uploader config
    Type: String
Mappings:
  BucketName:
    Stage:
      CODE: "uploads-origin.code.dev-guim.co.uk"
      PROD: "uploads-origin.guim.co.uk"
Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName:
        Fn::FindInMap: ['BucketName', 'Stage', {Ref: Stage}]
  BucketReadPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: {Ref: Bucket}
      PolicyDocument:
        Statement:
        - Action: ['s3:GetObject']
          Effect: Allow
          Principal: '*'
          Resource:
            Fn::Join: ['', ['arn:aws:s3:::', {Ref: Bucket}, '/*' ]]
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal: { Service: [ec2.amazonaws.com] }
  Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BatchUploaderPolicy
      PolicyDocument:
        Statement:
        - Action: ['ec2:DescribeTags']
          Effect: Allow
          Resource: '*'
        - Action: ['s3:GetObject']
          Effect: Allow
          Resource: 'arn:aws:s3:::media-service-dist/*'
        - Action: ['s3:PutObject']
          Effect: Allow
          Resource:
            Fn::Join: ['', ['arn:aws:s3:::', {Ref: Bucket}, '/*' ]]
        - Action: ['s3:GetObject']
          Effect: Allow
          Resource:
            Fn::Join: ['', ['arn:aws:s3:::', {Ref: ConfigBucket}, '/*' ]]
      Roles:
      - {Ref: Role}
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - {Ref: Role}

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: s3-uploader ELB
      SecurityGroupIngress:
      - {IpProtocol: tcp, FromPort: 443, ToPort: 443, CidrIp: 0.0.0.0/0}

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: s3-uploader instance
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9000
        SourceSecurityGroupId: {'Fn::GetAtt': [ELBSecurityGroup, GroupId]}
      - {IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: 77.91.248.0/21}

  ELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones: {'Fn::GetAZs': ''}
      SecurityGroups:
      - Fn::GetAtt: [ELBSecurityGroup, GroupId]
      Listeners:
      - {LoadBalancerPort: 80, InstancePort: 9000, Protocol: HTTP}
      - {LoadBalancerPort: 443, InstancePort: 9000, Protocol: HTTPS, SSLCertificateId: {Ref: SSLCertificateId}}
      HealthCheck:
        Target: 'HTTP:9000/management/healthcheck'
        HealthyThreshold: 2
        UnhealthyThreshold: 2
        Interval: 10
        Timeout: 5
      Tags:
      - { Key: App, Value: {Ref: App} }
      - { Key: Stack, Value: {Ref: Stack} }
      - { Key: Stage, Value: {Ref: Stage} }

  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: {'Fn::GetAZs': ''}
      Cooldown: '180'
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: {Ref: LaunchConfig}
      LoadBalancerNames:
      - { Ref: ELB }
      MaxSize: 2
      MinSize: 1
      DesiredCapacity: 1
      Tags:
      - { Key: App, Value: {Ref: App},  PropagateAtLaunch: true }
      - { Key: Stack, Value: {Ref: Stack}, PropagateAtLaunch: true }
      - { Key: Stage, Value: {Ref: Stage}, PropagateAtLaunch: true }

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName:
            Ref: Role
          buckets:
            - media-service-dist
      AWS::CloudFormation::Init:
        config:
          users:
            s3-uploader:
              homeDir: "/home/s3-uploader"
          files:
            "/home/media-service/s3-uploader.deb":
              source:
                Fn::Join:
                  - ""
                  -
                    - "https://s3-eu-west-1.amazonaws.com/media-service-dist/media-service/"
                    - Ref: "Stage"
                    - "/s3-uploader/s3-uploader.deb"
            "/home/media-service/s3-uploader/conf/application.conf":
              source:
                Fn::Join:
                  - ""
                  -
                    - "https://s3-eu-west-1.amazonaws.com/"
                    - Ref: "ConfigBucket"
                    - "/"
                    - Ref: "Stage"
                    - "/application.conf"
              owner: s3-uploader
              authentication: S3AccessCreds
          commands:
            command1:
              command: "mkdir /etc/gu"
            command2:
              command: "echo \"$STAGE\" > /etc/gu/stage"
              env:
                STAGE: {Ref: Stage}
            command3:
              command: "echo \"panda.domain=$DOMAINROOT\" >> /etc/gu/s3-uploader.properties"
              env:
                DOMAINROOT:  {Ref: DomainRoot}
            command4:
              command: "echo \"s3.bucket=$BUCKET\" >> /etc/gu/s3-uploader.properties"
              env:
                BUCKET: {Ref: Bucket}

    Properties:
      KeyName: {Ref: KeyName}
      ImageId: !Ref 'AMI'
      SecurityGroups:
      - {Ref: InstanceSecurityGroup}
      InstanceType: t2.small
      IamInstanceProfile: {Ref: InstanceProfile}
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - |
              #!/bin/bash -ev

            - Fn::Join:
              - " "
              - - cfn-init -s
                - Ref: AWS::StackId
                - " -r LaunchConfig "
                - "  --region "
                - Ref: AWS::Region
                - " || error_exit 'Failed to run cfn-init'\n"
            - |
              dpkg -i /home/media-service/s3-uploader.deb
